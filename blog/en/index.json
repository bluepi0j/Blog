[{"content":"\n\nWhen I was writing an app of finding world time, I find a really interesting issue of `NSDateFormatter`.\n\nWhen we initialize a `NSDate` object, with `[NSDate date]`, it’s GMT time, rather than the time depends on our local time zone; and when we wants to print the string of local time by using `NSDateFormatter` it will add the time difference between tour local time zone and the GMT time directly.\n\nNow we are going to find another city’s time. First we will initialize `NSDate` with GMT time. Then we use the `NSTimeZone` to find the time zone of the city which you want to know its time( `citiesTimeZone`), and the time zone of the city your location now( `locolTimeZone`).\n\nThen, we use NSTimeInterval to find time differences between your location and GMT time( `locolTimeInterval`) and between the city you pick and GMT time(`citysecondFromGMT`).\n\nWe know if we want to know the time of city we pick, we just need to add time difference from GMT time( `citysecondFromGMT`). Why we need to find the locolTimeZone？\n\nAs I said before, when we use NSDateFormatter, it will add the time difference between tour local time zone and the GMT time(`locolTimeInterval`) directly. So, we need to minus this `locolTimeInterval` from `citysecondFromGMT`.\n\nAfter all, we can return a weird date, `NSDateFormatter` this date, and then you can print the right thing you want.\n\n~~~ objective-c\n- (NSDate *)transferTimeBy:(NSString *)cityTimeZoneName {\n\t//现在的绝对时间，是以GMT时区来表示的\n\tNSDate *GMTDate=[NSDate date];\n\n\t//timezone you pick\n\tNSTimeZone *citiesTimeZone=[NSTimeZone \ttimeZoneWithName:cityTimeZoneName];\n\t//所选城市所在时区距离GMT所差的时间（in second）\n\tNSTimeInterval citysecondFromGMT = [citiesTimeZone secondsFromGMT];\n\n\t//locol time zone\n\tNSTimeZone *locolTimeZone = [NSTimeZone localTimeZone];\n\t//本地时区距离GMT所差的时间\n\tNSTimeInterval locolTimeInterval = [locolTimeZone secondsFromGMT];\n\t//在NSDateFormatter中，NSDateFormatter为了把GMT时间正确输出为所在地时区的时间，会加上本地时区距离GMT所差的时间（locolTimeInterval），所以我们转换时区是需要把它从所选时区距离GMT时间时差中减掉\n\tcitysecondFromGMT = citysecondFromGMT - locolTimeInterval;\n\tGMTDate = [NSDate dateWithTimeInterval:citysecondFromGMT \tsinceDate:GMTDate];\n\treturn GMTDate;\n}\n~~~\n","cover":"","link":"nsdateformatter and finding world time.html","preview":"\u003cp\u003eWhen I was writing an app of finding world time, I find a really interesting issue of \u003ccode\u003eNSDateFormatter\u003c/code\u003e.When we initialize a \u003ccode\u003eNSDate\u003c/code\u003e object, with \u003ccode\u003e[NSDate date]\u003c/code\u003e, it’s GMT time, rather than the time depends on our local time zone; and when we wants to print the string of local time by using \u003ccode\u003eNSDateFormatter\u003c/code\u003e it will add the time difference between tour local time zone and the GMT time directly.\u003c/p\u003e\n","title":"NSDateFormatter And Finding World Time"},{"content":"\n\nRecursion is more like a thinking method rather than an algorithm. We break up the whole thing into the first one and the rest, and the base case is the condition that we can solve directly.\n\nI want to write a function using recursion to get the subset of a set and print like this when we input list [1, 2, 3]as set:\n\n~~~python\n[\n\n[1],\n\n[2],\n\n[3],\n\n[1, 2],\n\n[1, 3],\n\n[2, 3],\n\n[1, 2, 3]\n\n]\n~~~\n\nWe can split the set into two part, the first one, and the rest. Then use the first one to add the every element in the rest list.\n\n**Here is My Code:**\n\n~~~python\ndef subset(set):\n    #Base case: if set is empty set,return himself.\n    if len(set) == 0:\n        return[set]\n    #if set is only has one element, return\n    elif len(set) == 1:\n        return [[]] + [set]\n    #recursive thinking\n    else:\n        #split the set into the first and rest and get the rest element of set\n        rest = subset(set[1:])\n        #the list of all subset\n        alist = []\n        # for every element in the the rest part\n        for item in rest:\n            #first element in subset add every element in the rest\n            blist = [set[0]]\n            blist += item\n            alist.append(blist)\n        #rest is the subset of rest (last subset call)\n        return rest + alist\n~~~\n\n**Output:**\n\n``` python\n\u003e\u003e\u003esubset([1,2,3])\n[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]\n```\n\nIf we want to change it into our order:\n\n``` python\n\u003e\u003e\u003eprint(sorted(subset([1, 2, 3]), key=lambda l : int('0' + ''.join(str(i) for i in l))))\n[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n```\n--\n```python\ndef simplesubset(set):\n    if not set:\n        return [set]\n    rest = simplesubset(set[1:])\n    return rest + [[set[0]] + item for item in rest]\n```\n\n**Note:**\n\ndifference between list.append() and [ ]+[ ]\n\n~~~python\n\u003e\u003e\u003e[[]]+[[3]+[]]\n[[], [3]]\n\u003e\u003e\u003e[3]+[]\n[3]\n\u003e\u003e\u003elist = []\n\u003e\u003e\u003elist.append(3)\n\u003e\u003e\u003elist\n[3]\n\u003e\u003e\u003elist.append([3])\n\u003e\u003e\u003elist\n[3, [3]]\n~~~\n\n\n## Get subset without recursion:\n\n~~~python\n\ndef powerset(set):\n    alist = [[]]\n    for item in set:\n        alist += [y + [item] for y in alist]\n    return alist\n~~~\n\n## Other Resources:\n\n[http://www.mhhe.com/engcs/compsci/sahni/c1/E5.HTM](http://www.mhhe.com/engcs/compsci/sahni/c1/E5.HTM)\n\n[http://stackoverflow.com/questions/26311919/how-to-use-recursion-to-get-subset-by-splitting-the-set-to-first-one-and-rest-pa](http://stackoverflow.com/questions/26311919/how-to-use-recursion-to-get-subset-by-splitting-the-set-to-first-one-and-rest-pa)\n\n[http://blog.csdn.net/qsyzb/article/details/23119529\n](http://blog.csdn.net/qsyzb/article/details/23119529)\n\n[http://narutolby.iteye.com/blog/1894901](http://narutolby.iteye.com/blog/1894901)\n","cover":"","link":"using recursion to get subset (python).html","preview":"\u003cp\u003eRecursion is more like a thinking method rather than an algorithm. We break up the whole thing into the first one and the rest, and the base case is the condition that we can solve directly.\u003c/p\u003e\n","title":"Using recursion to get subset (python)"}]